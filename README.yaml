name: Terraform AWS EC2 Instance
#logo: logo/logo.jpg

license: "APACHE2"

copyrights:
  - name: "Cloud Ops Works LLC"
    url: "https://cloudops.works"
    year: "2024"

github_repo: cloudopsworks/terraform-module-aws-ec2-instances

description: |-
  This Terraform module simplifies provisioning and managing Amazon EC2 instances in AWS. 
  It allows you to define configurations such as instance types, VPC subnets, security groups, 
  and more. By encapsulating all essential settings and optional features, the module helps 
  ensure that your EC2 infrastructure remains consistent, reproducible, and version-controlled.

# Introduction to the project
introduction: |-
  The Terraform AWS EC2 Instance module is designed to provide an easy way to manage and 
  scale virtual machines within the AWS ecosystem. Whether you need to provision single or 
  multiple EC2 instances, this module offers an opinionated yet flexible approach that 
  streamlines the process of creating, configuring, and maintaining your infrastructure.
  
  By leveraging the features of Terraform, you can control changes to your EC2 instances 
  through code, facilitate audit trails, and eliminate the need for manual configuration. 
  This module is a specific solution aimed at making it straightforward for teams to define 
  and deploy EC2-based workloads in AWS with minimal overhead.

# How to use this project
usage: |-
  To incorporate this module, reference it with Terragrunt while following the structure of the .boilerplate templates in the "develop" branch of this repository.
  
  Basic steps to use the module:
  1. Install Terraform (v1.0 or higher) and Terragrunt.
  2. Create or update your Terragrunt configuration files using the .boilerplate patterns.
  3. Provide required variables (AWS region, AMI IDs, instance types, etc.).
  4. Run terragrunt init to initialize your working directory.
  5. Run terragrunt plan to view resource changes.
  6. Run terragrunt apply to create the resources.
  
  Available Variables:

  name: (string, optional)
    - The name of the EC2 Instance
    - Default: ""

  name_prefix: (string, optional)
    - The name prefix of the EC2 Instance
    - Default: ""

  instance: (map, optional)
    Complex configuration for EC2 instance. Supports following structure:
    ```yaml
    instance:
      create: true | false     # defaults to True
      create_spot: true | false # defaults to False
      dedicated_host: true | false # defaults to False
      ignore_ami_changes: true | false # defaults to False
      ami:
        name: "ami-name" # optional
        architecture: "x86_64" | "arm64" # defaults to "x86_64"
        id: "ami-id" # optional
        most_recent: true | false # defaults to True
        owners: ["self"] # defaults to ["self"]
        filters: []
      type: "t2.micro" # defaults to "t2.micro"
      hibernation: true | false # defaults to null
      user_data: "user-data" # defaults to null
      user_data_base64: "user-data-base64" # defaults to null
      user_data_replace_on_change: true | false # defaults to null
      cpu_options:
        core_count: 1 # defaults to null
        threads_per_core: 1 # defaults to null
        amd_sev_snp: true | false # defaults to null
      availability_zone: "us-east-1a" # defaults to null
      key_name: "key-name" # defaults to null
      monitoring: true | false # defaults to null
      get_password_data: true | false # defaults to null
      vpc:
        security_group_ids: ["sg-12345678"] # defaults to null
        associate_public_ip_address: true | false # defaults to null
        subnet_id: "subnet-id" # defaults to null
        private_ip: "private-ip" # defaults to null
        secondary_private_ips: ["secondary-private-ip"] # defaults to null
        ipv6_address_count: 1 # defaults to null
        ipv6_addresses: ["ipv6-address"] # defaults to null
      ebs:
        ebs_optimized: true | false # defaults to null
      backup:
        enabled: true | false # defaults to false
        only_tag: true | false # defaults to true
        schedule_tag: hourly | daily | weekly | monthly # defaults to daily
        backup_vault_name: "backup-vault-name" # Required if only_tag is false
    ```

  timeouts: (map, optional)
    - The timeouts configuration for the EC2 Instance
    - Default: {}

  iam: (map, optional)
    IAM configuration with following structure:
    ```yaml
    iam:
      create: true | false # defaults to false
      instance_profile: "instance-profile" # defaults to null
    ```

  Example of a Terragrunt configuration referencing this module (terragrunt.hcl):
  ```hcl
  terraform {
    source = "git::https://github.com/cloudopsworks/terraform-module-aws-ec2-instances.git//?ref=develop"
  }

  inputs = {
    name = "my-instance"
    instance = {
      create = true
      type = "t2.micro"
      ami = {
        name = "my-custom-ami"
        owners = ["self"]
      }
      vpc = {
        subnet_id = "subnet-123456"
        security_group_ids = ["sg-123456"]
      }
    }
    iam = {
      create = true
      instance_profile = "my-profile"
    }
  }
  ```

# Example usage
examples: |-
  Here are sample use cases you can adapt in the .boilerplate files on the "develop" branch:
  
  1. Single Development Instance
     - Combine this module with minimal settings to spin up a small instance for dev/testing.
  
  2. Multi-Instance Setup
     - Leverage the instance_count variable to manage auto-scaling scenarios or replicate standardized instances in multiple environments.
  
  3. Private Subnet Deployment
     - Apply advanced networking configurations using Terragrunt's environment-based structure, automatically enforcing best practices established in boilerplate templates.
  
  For more Terragrunt-based examples and structural hints, see the .boilerplate directory in the "develop" branch.

# How to get started quickly
quickstart: |-
  1. Clone or fork the repository to review the .boilerplate templates under the "develop" branch.
  2. Adapt the relevant Terragrunt configuration files for your own environment by referencing this module.
  3. Initialize your workspace using terragrunt init.
  4. Review proposed infrastructure changes by running terragrunt plan.
  5. Finally, configure and deploy your EC2 instances with terragrunt apply.

include:
  - "docs/targets.md"
  - "docs/terraform.md"

contributors:
  - name: "Cristian Beraha"
    github: "berahac"